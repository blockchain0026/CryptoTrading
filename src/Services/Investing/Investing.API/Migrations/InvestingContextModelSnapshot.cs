// <auto-generated />
using System;
using CryptoTrading.Services.Investing.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoTrading.Services.Investing.API.Migrations
{
    [DbContext(typeof(InvestingContext))]
    partial class InvestingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:investing.fundseq", "'fundseq', 'investing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:investing.investmentroundtripseq", "'investmentroundtripseq', 'investing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:investing.investmentseq", "'investmentseq', 'investing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:investing.roundtripseq", "'roundtripseq', 'investing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Funds.Fund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "fundseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "investing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("FreeBalance")
                        .HasColumnType("decimal(20,8)");

                    b.Property<string>("FundId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Symbol")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FundId")
                        .IsUnique();

                    b.ToTable("funds","investing");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Funds.InvestingFund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "investmentroundtripseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "investing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("CurrentQuantity")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal?>("EndQuantity")
                        .HasColumnType("decimal(20,8)");

                    b.Property<int?>("FundId");

                    b.Property<decimal>("InitialQuantity")
                        .HasColumnType("decimal(20,8)");

                    b.Property<int>("InvestingFundStatusId");

                    b.Property<string>("InvestmentId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FundId");

                    b.HasIndex("InvestingFundStatusId");

                    b.ToTable("investingfunds","investing");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Funds.InvestingFundStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("investingfundstatus","investing");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Investments.Investment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "investmentseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "investing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(20,8)");

                    b.Property<DateTime?>("DateClosed");

                    b.Property<DateTime?>("DateStarted");

                    b.Property<decimal?>("EndBalance")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(20,8)");

                    b.Property<string>("InvestmentId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("InvestmentStatusId");

                    b.Property<int>("InvestmentTypeId");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentId")
                        .IsUnique();

                    b.HasIndex("InvestmentStatusId");

                    b.HasIndex("InvestmentTypeId");

                    b.ToTable("investments","investing");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Investments.InvestmentRoundtrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "investmentroundtripseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "investing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("EntryBalance")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal?>("ExitBalance")
                        .HasColumnType("decimal(20,8)");

                    b.Property<string>("InvestmentId")
                        .IsRequired();

                    b.Property<int?>("InvestmentId1");

                    b.Property<int>("RoundtripNumber");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentId1");

                    b.ToTable("investmentroundtrips","investing");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Investments.InvestmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("investmentstatus","investing");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Investments.InvestmentType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("investmenttype","investing");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Roundtrips.Roundtrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "roundtripseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "investing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime?>("EntryAt");

                    b.Property<decimal>("EntryBalance")
                        .HasColumnType("decimal(20,8)");

                    b.Property<DateTime?>("ExitAt");

                    b.Property<decimal?>("ExitBalance")
                        .HasColumnType("decimal(20,8)");

                    b.Property<string>("InvestmentId")
                        .IsRequired();

                    b.Property<string>("RoundtripId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("RoundtripNumber");

                    b.Property<int>("RoundtripStatusId");

                    b.Property<decimal>("StopLossPrice")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal>("TargetPrice")
                        .HasColumnType("decimal(20,8)");

                    b.HasKey("Id");

                    b.HasIndex("RoundtripId")
                        .IsUnique();

                    b.HasIndex("RoundtripStatusId");

                    b.ToTable("roundtrips","investing");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Roundtrips.RoundtripStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("roundtripstatus","investing");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("ClientRequests");
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Funds.Fund", b =>
                {
                    b.OwnsOne("CryptoTrading.Services.Investing.Domain.Model.Funds.Account", "Account", b1 =>
                        {
                            b1.Property<int>("FundId");

                            b1.Property<string>("Username");

                            b1.ToTable("funds","investing");

                            b1.HasOne("CryptoTrading.Services.Investing.Domain.Model.Funds.Fund")
                                .WithOne("Account")
                                .HasForeignKey("CryptoTrading.Services.Investing.Domain.Model.Funds.Account", "FundId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Funds.InvestingFund", b =>
                {
                    b.HasOne("CryptoTrading.Services.Investing.Domain.Model.Funds.Fund")
                        .WithMany("InvestingFunds")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoTrading.Services.Investing.Domain.Model.Funds.InvestingFundStatus", "InvestingFundStatus")
                        .WithMany()
                        .HasForeignKey("InvestingFundStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Investments.Investment", b =>
                {
                    b.HasOne("CryptoTrading.Services.Investing.Domain.Model.Investments.InvestmentStatus", "InvestmentStatus")
                        .WithMany()
                        .HasForeignKey("InvestmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoTrading.Services.Investing.Domain.Model.Investments.InvestmentType", "InvestmentType")
                        .WithMany()
                        .HasForeignKey("InvestmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CryptoTrading.Services.Investing.Domain.Model.Investments.Trace", "Trace", b1 =>
                        {
                            b1.Property<int?>("InvestmentId");

                            b1.Property<string>("TraceId");

                            b1.ToTable("investments","investing");

                            b1.HasOne("CryptoTrading.Services.Investing.Domain.Model.Investments.Investment")
                                .WithOne("Trace")
                                .HasForeignKey("CryptoTrading.Services.Investing.Domain.Model.Investments.Trace", "InvestmentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CryptoTrading.Services.Investing.Domain.Model.Funds.Account", "Account", b1 =>
                        {
                            b1.Property<int>("InvestmentId");

                            b1.Property<string>("Username");

                            b1.ToTable("investments","investing");

                            b1.HasOne("CryptoTrading.Services.Investing.Domain.Model.Investments.Investment")
                                .WithOne("Account")
                                .HasForeignKey("CryptoTrading.Services.Investing.Domain.Model.Funds.Account", "InvestmentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CryptoTrading.Services.Investing.Domain.Model.Investments.Market", "Market", b1 =>
                        {
                            b1.Property<int>("InvestmentId");

                            b1.Property<string>("BaseCurrency");

                            b1.Property<int>("ExchangeId");

                            b1.Property<string>("QuoteCurrency");

                            b1.ToTable("investments","investing");

                            b1.HasOne("CryptoTrading.Services.Investing.Domain.Model.Investments.Investment")
                                .WithOne("Market")
                                .HasForeignKey("CryptoTrading.Services.Investing.Domain.Model.Investments.Market", "InvestmentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Investments.InvestmentRoundtrip", b =>
                {
                    b.HasOne("CryptoTrading.Services.Investing.Domain.Model.Investments.Investment")
                        .WithMany("InvestmentRoundtrips")
                        .HasForeignKey("InvestmentId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CryptoTrading.Services.Investing.Domain.Model.Investments.Market", "Market", b1 =>
                        {
                            b1.Property<int>("InvestmentRoundtripId");

                            b1.Property<string>("BaseCurrency");

                            b1.Property<int>("ExchangeId");

                            b1.Property<string>("QuoteCurrency");

                            b1.ToTable("investmentroundtrips","investing");

                            b1.HasOne("CryptoTrading.Services.Investing.Domain.Model.Investments.InvestmentRoundtrip")
                                .WithOne("Market")
                                .HasForeignKey("CryptoTrading.Services.Investing.Domain.Model.Investments.Market", "InvestmentRoundtripId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CryptoTrading.Services.Investing.Domain.Model.Roundtrips.Roundtrip", b =>
                {
                    b.HasOne("CryptoTrading.Services.Investing.Domain.Model.Roundtrips.RoundtripStatus", "RoundtripStatus")
                        .WithMany()
                        .HasForeignKey("RoundtripStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CryptoTrading.Services.Investing.Domain.Model.Roundtrips.Transaction", "Transaction", b1 =>
                        {
                            b1.Property<int?>("RoundtripId");

                            b1.Property<decimal?>("BuyAmount")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<decimal?>("BuyPrice")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<decimal?>("SellAmount")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<decimal?>("SellPrice")
                                .HasColumnType("decimal(20,8)");

                            b1.ToTable("roundtrips","investing");

                            b1.HasOne("CryptoTrading.Services.Investing.Domain.Model.Roundtrips.Roundtrip")
                                .WithOne("Transaction")
                                .HasForeignKey("CryptoTrading.Services.Investing.Domain.Model.Roundtrips.Transaction", "RoundtripId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CryptoTrading.Services.Investing.Domain.Model.Investments.Market", "Market", b1 =>
                        {
                            b1.Property<int?>("RoundtripId");

                            b1.Property<string>("BaseCurrency");

                            b1.Property<int>("ExchangeId");

                            b1.Property<string>("QuoteCurrency");

                            b1.ToTable("roundtrips","investing");

                            b1.HasOne("CryptoTrading.Services.Investing.Domain.Model.Roundtrips.Roundtrip")
                                .WithOne("Market")
                                .HasForeignKey("CryptoTrading.Services.Investing.Domain.Model.Investments.Market", "RoundtripId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
