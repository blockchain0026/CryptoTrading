// <auto-generated />
using System;
using CryptoTrading.Services.ExchangeAccess.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoTrading.Services.ExchangeAccess.API.Migrations
{
    [DbContext(typeof(ExchangeAccessContext))]
    [Migration("20181130093724_InitialCraeted")]
    partial class InitialCraeted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:exchangeaccess.assetseq", "'assetseq', 'exchangeaccess', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:exchangeaccess.balanceseq", "'balanceseq', 'exchangeaccess', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:exchangeaccess.candlechartseq", "'candlechartseq', 'exchangeaccess', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:exchangeaccess.candleseq", "'candleseq', 'exchangeaccess', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:exchangeaccess.marketaskseq", "'marketaskseq', 'exchangeaccess', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:exchangeaccess.marketbidseq", "'marketbidseq', 'exchangeaccess', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:exchangeaccess.marketseq", "'marketseq', 'exchangeaccess', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Balances.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "assetseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "exchangeaccess")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("Available")
                        .HasColumnType("decimal(20,8)");

                    b.Property<int?>("BalanceId");

                    b.Property<decimal>("Locked")
                        .HasColumnType("decimal(20,8)");

                    b.Property<string>("Symbol")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.ToTable("assets","exchangeaccess");
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Balances.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "balanceseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "exchangeaccess")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("BalanceId")
                        .IsRequired();

                    b.Property<int>("ExchangeId");

                    b.HasKey("Id");

                    b.ToTable("balances","exchangeaccess");
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.CandleCharts.Candle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "candleseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "exchangeaccess")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("CandleChartId");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(20,8)");

                    b.Property<DateTime>("Timestamp");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(20,8)");

                    b.HasKey("Id");

                    b.HasIndex("CandleChartId");

                    b.ToTable("candles","exchangeaccess");
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.CandleCharts.CandleChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "candlechartseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "exchangeaccess")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("BaseCurrency")
                        .IsRequired();

                    b.Property<string>("CandleChartId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("CandlePeriodId");

                    b.Property<int>("ExchangeId");

                    b.Property<string>("MarketId")
                        .IsRequired();

                    b.Property<string>("QuoteCurrency")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CandleChartId")
                        .IsUnique();

                    b.HasIndex("CandlePeriodId");

                    b.ToTable("candlecharts","exchangeaccess");
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.CandleCharts.CandlePeriod", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("candleperiod","exchangeaccess");
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "marketseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "exchangeaccess")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("BaseCurrency")
                        .IsRequired();

                    b.Property<string>("MarketId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("OrderSizeLimit");

                    b.Property<string>("QuoteCurrency")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MarketId")
                        .IsUnique();

                    b.ToTable("markets","exchangeaccess");
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.MarketAsk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "marketaskseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "exchangeaccess")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("MarketId")
                        .IsRequired();

                    b.Property<int?>("MarketId1");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(20,8)");

                    b.HasKey("Id");

                    b.HasIndex("MarketId1");

                    b.ToTable("marketasks","exchangeaccess");
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.MarketBid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "marketbidseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "exchangeaccess")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("MarketId")
                        .IsRequired();

                    b.Property<int?>("MarketId1");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(20,8)");

                    b.HasKey("Id");

                    b.HasIndex("MarketId1");

                    b.ToTable("marketbids","exchangeaccess");
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Balances.Asset", b =>
                {
                    b.HasOne("CryptoTrading.Services.ExchangeAccess.Domain.Model.Balances.Balance")
                        .WithMany("Assets")
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Balances.Balance", b =>
                {
                    b.OwnsOne("CryptoTrading.Services.ExchangeAccess.Domain.Model.Balances.Account", "Account", b1 =>
                        {
                            b1.Property<int?>("BalanceId");

                            b1.Property<string>("ApiKey");

                            b1.Property<string>("ApiSecret");

                            b1.Property<string>("Username");

                            b1.ToTable("balances","exchangeaccess");

                            b1.HasOne("CryptoTrading.Services.ExchangeAccess.Domain.Model.Balances.Balance")
                                .WithOne("Account")
                                .HasForeignKey("CryptoTrading.Services.ExchangeAccess.Domain.Model.Balances.Account", "BalanceId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.CandleCharts.Candle", b =>
                {
                    b.HasOne("CryptoTrading.Services.ExchangeAccess.Domain.Model.CandleCharts.CandleChart")
                        .WithMany("Candles")
                        .HasForeignKey("CandleChartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.CandleCharts.CandleChart", b =>
                {
                    b.HasOne("CryptoTrading.Services.ExchangeAccess.Domain.Model.CandleCharts.CandlePeriod", "CandlePeriod")
                        .WithMany()
                        .HasForeignKey("CandlePeriodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.Market", b =>
                {
                    b.OwnsOne("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.Exchange", "Exchange", b1 =>
                        {
                            b1.Property<int?>("MarketId");

                            b1.Property<int>("ExchangeId");

                            b1.Property<string>("ExchangeName");

                            b1.ToTable("markets","exchangeaccess");

                            b1.HasOne("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.Market")
                                .WithOne("Exchange")
                                .HasForeignKey("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.Exchange", "MarketId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.MarketAsk", b =>
                {
                    b.HasOne("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.Market")
                        .WithMany("Asks")
                        .HasForeignKey("MarketId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.MarketBid", b =>
                {
                    b.HasOne("CryptoTrading.Services.ExchangeAccess.Domain.Model.Markets.Market")
                        .WithMany("Bids")
                        .HasForeignKey("MarketId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
